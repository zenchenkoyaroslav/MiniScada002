package kz.elminpro.miniscada002;

import android.util.Log;

import java.util.Arrays;

/**
 * Created by ������� on 12.08.2015.
 */
public class ModBusFunction {

    String TAG = "ModBusFunction";

    /*-------------------Constructors--------------*/

    public ModBusFunction() {
    }

    public ModBusFunction(String onlyFunction) {
        this.onlyFunction = onlyFunction;
        setCRC();
        setFullFunction();
    }

    /*-------------------Constants-----------------*/
    private final int FIRST_FUNCTION = 0x01;
    private final int FIFTH_FUNCTION = 0x05;
    private final int FIFTEENTH_FUNCTION = 0x0F;

    private final int params[] = {
            FIRST_FUNCTION,
            FIFTH_FUNCTION,
            FIFTEENTH_FUNCTION
    };

    /*----------------Create CRC--------*/
    private final int CRC_HI[] = {
            0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
            0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
            0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
            0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
            0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81,
            0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
            0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
            0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
            0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
            0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
            0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
            0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
            0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
            0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
            0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
            0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
            0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
            0x40
    };

    private final int CRC_LO[] = {
            0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4,
            0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
            0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD,
            0x1D, 0x1C, 0xDC, 0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
            0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7,
            0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
            0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE,
            0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
            0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2,
            0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,
            0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB,
            0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
            0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91,
            0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
            0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88,
            0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
            0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
            0x40
    };

    public void setCRC() {
        int crc_hi;
        int crc_lo;
        int crc;
        int n;
        int len;

        len = onlyFunction.length();
        n = len / 2;
        if (n > 256) {
            return;
        }

        Log.d(TAG, "onlyFunction = " + onlyFunction);

        Log.d(TAG, "n = " + n);

        int[] bOnlyFunction = new int[n];
        for (int i = 0; i < len; i += 2) {
            bOnlyFunction[i / 2] = ((Character.digit(onlyFunction.charAt(i), 16) << 4)
                    + Character.digit(onlyFunction.charAt(i + 1), 16));
            Log.d(TAG, "bOnlyFunction["+i/2+"] = " + bOnlyFunction[i/2]);
        }
        Log.d(TAG, "bOnlyFunction = "+ Arrays.toString(bOnlyFunction));

        crc_hi = 0xFF;   // high byte of CRC initialized
        crc_lo = 0xFF;   // low byte of CRC initialized
        int j = 0;
        do {
            Log.d(TAG, "bOnlyFunction["+j+"] = " + Integer.toHexString(bOnlyFunction[j]));
            int i = crc_hi ^ bOnlyFunction[j++];        // will index into CRC lookup table
            crc_hi = crc_lo ^ CRC_HI[i];    // calculate the CRC
            crc_lo = CRC_LO[i];
            Log.d(TAG, "crc_hi = " + crc_hi);
            Log.d(TAG, "crc_lo = " + crc_lo);
            Log.d(TAG, "n = " + n);
        }
        while (--n != 0);         // pass through message buffer (max 256 items)

        crc = ((crc_hi << 8) | crc_lo);
        CRC = Integer.toHexString(crc);
        Log.d(TAG, "CRC = " + CRC);
    }

    public String getCRC() {
        return CRC;
    }

    /*-------------Variables-------------------------------*/

    private String deviceAddress;
    private String functionNumber;
    private String functionParams;
    private String CRC;

    private String onlyFunction;
    private String fullFunction;

    /*-------------------Craft ModBus function--------------------*/


    //Address of device
    public String getDeviceAddress() {
        return deviceAddress;
    }

    public void setDeviceAddress(int deviceAddress) {
        this.deviceAddress = Integer.toHexString(deviceAddress);
    }

    //Number og function
    public String getFunctionNumber() {
        return functionNumber;
    }

    public void setFunctionNumber(int functionNumber) {
        this.functionNumber = Integer.toHexString(functionNumber);
    }

    //Function params
    public String getFunctionParams() {
        return functionParams;
    }

    public void setFunctionParams(String[] functionParams) {
        switch (Integer.valueOf(functionParams[0])) {
            case FIRST_FUNCTION: {
                firstFunctionCode(functionParams[1], functionParams[2]);
                break;
            }
            case FIFTH_FUNCTION: {
                if(functionParams[1].equals("1")){
                    fifthFunctionOnCode(functionParams[2]);
                } else if(functionParams[1].equals("0")){
                    fifthFunctionOffCode(functionParams[2]);
                }
                break;
            }
            case FIFTEENTH_FUNCTION: {
                fifteenthFunctionCode(functionParams[1], functionParams[2], functionParams[3],
                        functionParams[4]);
                break;
            }
        }
    }

    private void firstFunctionCode(String firstRelay, String lastRelay) {
        int numberOfRelay = Integer.parseInt(lastRelay) - Integer.parseInt(firstRelay) + 1;
        String sFirstRelay = Integer.toHexString(Integer.parseInt(firstRelay));
        String sLastRelay = Integer.toHexString(numberOfRelay);
        functionParams = sFirstRelay + sLastRelay;
    }
    private void fifthFunctionOnCode(String relay){
        String sRelay = Integer.toHexString(Integer.parseInt(relay));
        String sData = "FF00";
        functionParams = sRelay + sData;
    }
    private void fifthFunctionOffCode(String relay){
        String sRelay = Integer.toHexString(Integer.parseInt(relay));
        String sData = "0000";
        functionParams = sRelay + sData;
    }
    //May be errors
    private void fifteenthFunctionCode(String firstRelay, String lastRelay, String numberOfBytes, String bytes){
        int numberOfRelay = Integer.parseInt(lastRelay) - Integer.parseInt(firstRelay) + 1;
        String sFirstRelay = Integer.toHexString(Integer.parseInt(firstRelay));
        String sLastRelay = Integer.toHexString(numberOfRelay);
        String sNumberOfBytes = Integer.toHexString(Integer.parseInt(numberOfBytes));
        String sBytes = Integer.toHexString(Integer.parseInt(bytes));

        functionParams = sFirstRelay + sLastRelay + sNumberOfBytes + sBytes;
    }


    /*---------------------Create function------------------*/
    public String getOnlyFunction() {
        return onlyFunction;
    }

    public void setOnlyFunction() {
        onlyFunction = deviceAddress + functionNumber + functionParams;
    }

    public String getFullFunction() {
        return fullFunction;
    }

    public void setFullFunction() {
        fullFunction = onlyFunction + CRC;
    }

    @Override
    public String toString() {
        return fullFunction;
    }
}
